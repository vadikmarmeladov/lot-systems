"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }function J(t){let e=typeof t=="string"?JSON.parse(t):t;return _nullishCoalesce(_nullishCoalesce(_optionalChain([e, 'access', _2 => _2.choices, 'optionalAccess', _3 => _3[0], 'optionalAccess', _4 => _4.delta, 'optionalAccess', _5 => _5.function_call, 'optionalAccess', _6 => _6.arguments]), () => (_optionalChain([e, 'access', _7 => _7.choices, 'optionalAccess', _8 => _8[0], 'optionalAccess', _9 => _9.message, 'optionalAccess', _10 => _10.function_call, 'optionalAccess', _11 => _11.arguments]))), () => (""))}function R(t){let e=typeof t=="string"?JSON.parse(t):t;return _nullishCoalesce(_nullishCoalesce(_optionalChain([e, 'access', _12 => _12.choices, 'optionalAccess', _13 => _13[0], 'optionalAccess', _14 => _14.delta, 'optionalAccess', _15 => _15.tool_calls, 'optionalAccess', _16 => _16[0], 'optionalAccess', _17 => _17.function, 'optionalAccess', _18 => _18.arguments]), () => (_optionalChain([e, 'access', _19 => _19.choices, 'optionalAccess', _20 => _20[0], 'optionalAccess', _21 => _21.message, 'optionalAccess', _22 => _22.tool_calls, 'optionalAccess', _23 => _23[0], 'optionalAccess', _24 => _24.function, 'optionalAccess', _25 => _25.arguments]))), () => (""))}function _(t){let e=typeof t=="string"?JSON.parse(t):t,o=_nullishCoalesce(_nullishCoalesce(_optionalChain([e, 'access', _26 => _26.choices, 'optionalAccess', _27 => _27[0], 'optionalAccess', _28 => _28.delta, 'optionalAccess', _29 => _29.content]), () => (_optionalChain([e, 'optionalAccess', _30 => _30.choices, 'optionalAccess', _31 => _31[0], 'optionalAccess', _32 => _32.message, 'optionalAccess', _33 => _33.content]))), () => ("")),n=/```json\n([\s\S]*?)\n```/,r=o.match(n);return r?r[1]:o}function u(t){let e=typeof t=="string"?JSON.parse(t):t,o=_optionalChain([e, 'access', _34 => _34.choices, 'optionalAccess', _35 => _35[0], 'optionalAccess', _36 => _36.delta, 'optionalAccess', _37 => _37.function_call, 'optionalAccess', _38 => _38.arguments])||_optionalChain([e, 'access', _39 => _39.choices, 'optionalAccess', _40 => _40[0], 'optionalAccess', _41 => _41.message, 'optionalAccess', _42 => _42.function_call, 'optionalAccess', _43 => _43.arguments])||!1,n=_nullishCoalesce(_nullishCoalesce(_optionalChain([e, 'access', _44 => _44.choices, 'optionalAccess', _45 => _45[0], 'optionalAccess', _46 => _46.delta, 'optionalAccess', _47 => _47.tool_calls, 'optionalAccess', _48 => _48[0], 'optionalAccess', _49 => _49.function, 'optionalAccess', _50 => _50.arguments]), () => (_optionalChain([e, 'access', _51 => _51.choices, 'optionalAccess', _52 => _52[0], 'optionalAccess', _53 => _53.message, 'optionalAccess', _54 => _54.tool_calls, 'optionalAccess', _55 => _55[0], 'optionalAccess', _56 => _56.function, 'optionalAccess', _57 => _57.arguments]))), () => (!1));return o?J(t):n?R(t):_(t)}function A(t){return t.replace(/[\x00-\x1F\x7F-\x9F]/g,"")}function T({res:t}){let e,o=new TextEncoder;async function*n(a){let i=!1;e=()=>{i=!0};for await(let s of a){if(i)break;u(s)&&(yield u(s))}}let r=n(t);return new ReadableStream({async start(a){for await(let i of r)a.enqueue(o.encode(A(i)));a.close()},cancel(){e&&e()}})}async function*S(t){let e=t.getReader(),o=new TextDecoder;for(;;){let{done:n,value:r}=await e.read();if(n)break;let a=A(o.decode(r));yield JSON.parse(a)}}var _schemastream = require('schema-stream');var d=class{constructor({debug:e=!1}={}){this.debug=!1;this.debug=e}log(e,...o){if(!this.debug&&e==="debug")return;let n=new Date().toISOString();switch(e){case"debug":console.debug(`[ZodStream-CLIENT:DEBUG] ${n}:`,...o);break;case"info":console.info(`[ZodStream-CLIENT:INFO] ${n}:`,...o);break;case"warn":console.warn(`[ZodStream-CLIENT:WARN] ${n}:`,...o);break;case"error":console.error(`[ZodStream-CLIENT:ERROR] ${n}:`,...o);break}}async chatCompletionStream({completionPromise:e,data:o,response_model:n}){let r=[],a=[];this.log("debug","Starting completion stream");let i=new (0, _schemastream.SchemaStream)(n.schema,{typeDefaults:{string:null,number:null,boolean:null},onKeyComplete:({activePath:s,completedPaths:c})=>{this.log("debug","Key complete",s,c),r=s,a=c}});try{let s=i.parse({handleUnescapedNewLines:!0}),c=new TextEncoder,m=new TextDecoder,h=new TransformStream({transform:async(O,P)=>{try{let l=JSON.parse(m.decode(O)),y=await n.schema.safeParseAsync(l);this.log("debug","Validation result",y),P.enqueue(c.encode(JSON.stringify({...l,_meta:{_isValid:y.success,_activePath:r,_completedPaths:a}})))}catch(l){this.log("error","Error in the partial stream validation stream",l,O),P.error(l)}},flush(){}}),f=await e(o);if(!f)throw this.log("error","Completion call returned no data"),new Error(f);return f.pipeThrough(s),s.readable.pipeThrough(h),S(h.readable)}catch(s){throw this.log("error","Error making completion call"),s}}getSchemaStub({schema:e,defaultData:o={}}){return new (0, _schemastream.SchemaStream)(e,{defaultData:o,typeDefaults:{string:null,number:null,boolean:null}}).getSchemaStub(e,o)}async create(e){return this.chatCompletionStream(e)}};function x(t,e){let o={};for(let n in e)e.hasOwnProperty(n)&&!t.includes(n)&&(o[n]=e[n]);return o}function M(t,e){let{name:o,description:n,...r}=t,a={name:o},i=[..._nullishCoalesce(_optionalChain([e, 'optionalAccess', _58 => _58.functions]), () => ([])),{name:o,description:_nullishCoalesce(n, () => (void 0)),parameters:r}];return{...e,function_call:a,functions:i}}function w(t,e){let{name:o,description:n,...r}=t,a={type:"function",function:{name:o}},i=[{type:"function",function:{name:o,description:n,parameters:r}},..._nullishCoalesce(_optionalChain([e, 'access', _59 => _59.tools, 'optionalAccess', _60 => _60.map, 'call', _61 => _61(s=>({type:s.type,function:{name:s.function.name,description:s.function.description,parameters:s.function.parameters}}))]), () => ([]))];return{...e,tool_choice:a,tools:i}}function C(t,e){return{...e,messages:[{role:"system",content:`
          Given a user prompt, you will return fully valid JSON based on the following description and schema.
          You will return no other prose. You will take into account any descriptions or required parameters within the schema
          and return a valid and fully escaped JSON object that matches the schema and those instructions.

          description: ${t.description}
          json schema: ${JSON.stringify(t)}
        `},...e.messages]}}function N(t,e){return{...e,messages:[{role:"system",content:`
          Given a user prompt, you will return fully valid JSON based on the provided description and schema.

          You will take into account any descriptions or required parameters within the schema
          and return a valid and fully escaped JSON object that matches the schema and those instructions.

          You will always return your full thought process in one <think> tag and then return the JSON response in a \`\`\`json block after the </think> tag. Never include any prose or thinking process outside of the <think> tag.
          
          For example:
            <think>
              I am analyzing the input to extract the required information...
            </think>

              \`\`\`json
              {
                "result": "the actual json response"
              }
              \`\`\`

          



          description: ${t.description}
          json schema: ${JSON.stringify(t)}
        `},...e.messages]}}function b(t,e){return{...e,response_format:{type:"json_object"},messages:[{role:"system",content:`
          Given a user prompt, you will return fully valid JSON based on the following description and schema.
          You will return no other prose. You will take into account any descriptions or required parameters within the schema
          and return a valid and fully escaped JSON object that matches the schema and those instructions.

          description: ${t.description}
          json schema: ${JSON.stringify(t)}
        `},...e.messages]}}function k(t,e){return{...e,response_format:{type:"json_object",schema:x(["name","description"],t)},messages:[{role:"system",content:`
          Given a user prompt, you will return fully valid JSON based on the following description.
          You will return no other prose. You will take into account any descriptions or required parameters within the schema
          and return a valid and fully escaped JSON object that matches the schema and those instructions.

          description: ${t.description}
        `},...e.messages]}}var _zodtojsonschema = require('zod-to-json-schema'); var _zodtojsonschema2 = _interopRequireDefault(_zodtojsonschema);var p={FUNCTIONS:"FUNCTIONS",TOOLS:"TOOLS",JSON:"JSON",MD_JSON:"MD_JSON",JSON_SCHEMA:"JSON_SCHEMA",THINKING_MD_JSON:"THINKING_MD_JSON"};function g({response_model:{name:t,schema:e,description:o=""},mode:n,params:r}){let a=t.replace(/[^a-zA-Z0-9]/g,"_").replace(/\s/g,"_"),{definitions:i}=_zodtojsonschema2.default.call(void 0, e,{name:a,errorMessages:!0});if(!i||!_optionalChain([i, 'optionalAccess', _62 => _62[a]]))throw console.warn("Could not extract json schema definitions from your schema",e),new Error("Could not extract json schema definitions from your schema");let s={name:a,description:o,...i[a]};return n===p.FUNCTIONS?M(s,r):n===p.TOOLS?w(s,r):n===p.JSON?b(s,r):n===p.JSON_SCHEMA?k(s,r):n===p.MD_JSON?C(s,r):n===p.THINKING_MD_JSON?N(s,r):C(s,r)}function Q({defaultClientOptions:t,response_model:e,mode:o="TOOLS",client:n}){let r={temperature:.7,top_p:1,frequency_penalty:0,presence_penalty:0,n:1,...t};if(!n)throw new Error("an OpenAI-like client is required");let a=n;return{completionStream:async i=>{let s=[..._nullishCoalesce(r.messages, () => ([])),..._nullishCoalesce(_optionalChain([i, 'optionalAccess', _63 => _63.messages]), () => ([]))],c=g({mode:o,response_model:e,params:{...r,...i,stream:!0,messages:s}}),m=await a.chat.completions.create(c);return T({res:m})},completion:async i=>{let s=[..._nullishCoalesce(r.messages, () => ([])),..._nullishCoalesce(_optionalChain([i, 'optionalAccess', _64 => _64.messages]), () => ([]))],c=g({mode:o,response_model:e,params:{...r,...i,stream:!1,messages:s}}),m=await a.chat.completions.create(c),h=u(m);return JSON.parse(h)}}}function ee(t,e){let{_completedPaths:o}=_nullishCoalesce(_optionalChain([e, 'optionalAccess', _65 => _65._meta]), () => ({}));return o.some(n=>n.length!==t.length?!1:n.every((r,a)=>{let i=t[a];return r===void 0||i===void 0?!0:r===i}))}function ne(t){let e=typeof t=="string"?t:"choices"in t&&_optionalChain([t, 'access', _66 => _66.choices, 'optionalAccess', _67 => _67[0]])?_nullishCoalesce(_optionalChain([t, 'access', _68 => _68.choices, 'access', _69 => _69[0], 'access', _70 => _70.message, 'optionalAccess', _71 => _71.content]), () => ("")):"",o=/<think(?:ing)?>([\s\S]*?)(?:<\/think(?:ing)?>|\Z)/i,n=e.match(o),r=n?n[1].trim():"",a=e.replace(o,"").trim();if(a.trim().startsWith("{")||a.trim().startsWith("["))return{json:a.trim(),thinking:r};let i=/```(?:json)?\s*([\s\S]*?)```/,s=a.match(i);if(s)return{json:s[1].trim(),thinking:r};let c=a.match(/```(?:json)?\s*([\s\S]*)/i);if(c){let m=c[1].trim();if(m.startsWith("{")||m.startsWith("["))return{json:m,thinking:r}}return{json:"",thinking:r}}var se=d;exports.MODE = p; exports.OAIResponseFnArgsParser = J; exports.OAIResponseJSONParser = _; exports.OAIResponseParser = u; exports.OAIResponseToolArgsParser = R; exports.OAIStream = T; exports.createAgent = Q; exports.default = se; exports.isPathComplete = ee; exports.readableStreamToAsyncGenerator = S; exports.thinkingJsonParser = ne; exports.withResponseModel = g;
//# sourceMappingURL=index.cjs.map