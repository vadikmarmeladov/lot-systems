name: lot-systems-dev
region: nyc3
services:
  - name: web
    git:
      branch: master
      repo_clone_url: https://github.com/vadikmarmeladov/lot-systems.git
    build_command: |
      echo "Starting build process..."
      
      # Debug initial state
      echo "Initial directory structure:"
      pwd
      ls -la
      
      # Install core dependencies first
      echo "Installing core dependencies..."
      yarn add -D tailwindcss@latest postcss@latest postcss-nesting@latest
      yarn add -D @tailwindcss/nesting
      yarn add -D esbuild@latest
      yarn add -D vite@latest
      yarn add -D typescript@latest
      
      # Install additional build dependencies
      echo "Installing additional build dependencies..."
      yarn add -D postcss-import@latest
      yarn add -D autoprefixer@latest
      yarn add -D typescript-esbuild@latest
      
      # Install all project dependencies
      echo "Installing project dependencies..."
      yarn install --frozen-lockfile --production=false || exit 1
      
      # Install global packages
      echo "Installing global packages..."
      yarn global add postcss-cli esbuild-runner typescript-esbuild || exit 1
      
      # Verify critical dependencies
      echo "Verifying dependencies..."
      yarn list tailwindcss
      yarn list postcss-nesting
      yarn list esbuild
      yarn list vite
      
      # Create build directories
      echo "Creating build directories..."
      mkdir -p dist/client/css dist/server/server
      
      # Update PostCSS config
      echo "Updating PostCSS config..."
      cat > postcss.config.js << 'END'
      module.exports = {
        plugins: {
          'postcss-import': {},
          'tailwindcss/nesting': 'postcss-nesting',
          tailwindcss: {},
          autoprefixer: {},
        }
      }
      END
      
      # Build steps with verbose output
      echo "Building client CSS..."
      NODE_ENV=production DEBUG=* yarn run client:css:build
      if [ $? -ne 0 ]; then
        echo "Client CSS build failed"
        exit 1
      fi
      
      echo "Building client JS..."
      NODE_ENV=production yarn run client:js:build
      if [ $? -ne 0 ]; then
        echo "Client JS build failed"
        exit 1
      fi
      
      echo "Building server..."
      NODE_ENV=production yarn run server:build
      if [ $? -ne 0 ]; then
        echo "Server build failed"
        exit 1
      fi
      
      # Verify build outputs
      echo "Verifying build outputs..."
      ls -la dist/
      ls -la dist/client/css/
      ls -la dist/server/server/
      
      # Check for both .js and .mjs files
      if [ ! -f "dist/server/server/index.js" ] && [ ! -f "dist/server/server/index.mjs" ]; then
        echo "Error: Server build output missing"
        exit 1
      fi
      
      if [ ! -f "dist/client/css/index.css" ]; then
        echo "Error: CSS build output missing"
        exit 1
      fi
      
      # Run migrations
      echo "Running migrations..."
      NODE_ENV=production DATABASE_URL="postgresql://doadmin:AVNS_8V6Hqzuxwj0JkMxgNvR@db-postgresql-nyc3-92053-do-user-22640384-0.f.db.ondigitalocean.com:25060/defaultdb?sslmode=require" yarn run migrations:up || exit 1
      
      # Create a symbolic link from .mjs to .js if needed
      if [ -f "dist/server/server/index.mjs" ] && [ ! -f "dist/server/server/index.js" ]; then
        echo "Creating symbolic link from .mjs to .js..."
        ln -s dist/server/server/index.mjs dist/server/server/index.js
      fi
      
      echo "Build process completed successfully"
    run_command: node --experimental-modules dist/server/server/index.mjs
    environment_slug: node-js
    instance_size_slug: basic-xxs
    instance_count: 1
    envs:
      - key: NODE_ENV
        scope: RUN_AND_BUILD_TIME
        value: production
      - key: DATABASE_URL
        scope: RUN_AND_BUILD_TIME
        value: "postgresql://doadmin:AVNS_8V6Hqzuxwj0JkMxgNvR@db-postgresql-nyc3-92053-do-user-22640384-0.f.db.ondigitalocean.com:25060/defaultdb?sslmode=require"
      - key: PORT
        scope: RUN_TIME
        value: "8080"
      - key: APP_NAME
        scope: RUN_TIME
        value: "LOT Systems"
      - key: APP_HOST
        scope: RUN_TIME
        value: "${_self.PUBLIC_URL}"
      - key: JWT_SECRET
        scope: RUN_AND_BUILD_TIME
        value: "13919320b2a8816ced947b7a6385811b"
      - key: RESEND_API_KEY
        scope: RUN_TIME
        value: "re_83s23f6W_LbDfdmmXpXJ4je4i2kt1HA7u"
      - key: RESEND_FROM_EMAIL
        scope: RUN_TIME
        value: "support@lot-systems.com"
      - key: RESEND_FROM_NAME
        scope: RUN_TIME
        value: "LOT Systems"